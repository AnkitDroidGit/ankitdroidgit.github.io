
var documents = [{
    "id": 0,
    "url": "http://localhost:4000/404.html",
    "title": "404",
    "body": "404 Page does not exist!Please use the search bar at the top or visit our homepage! "
    }, {
    "id": 1,
    "url": "http://localhost:4000/about",
    "title": "About Me",
    "body": " Hello, I’m Ankit Kumar ! A highly motivated software engineer, who applies the principles of software engineering to the design, development, maintenance, testing, and evaluation of software I’m currently working as a Software Engineer in Singapore. I love building new things, products and tools to solve everyday problems. Through the years I’ve worked on below technologies and programming languages and I’m currently learning to build distributed scalable applications          My Key Skills are          Openness to new experiences     Creativity     Product-focused approach     Passion for Software development     Positive attitude     Communication skills     Attention to detail     Problem-solving skills     Teamwork     Analyze Requirements and Needs     Analytical Thinking     Comfortable Writing     Critical Thinking     Document Application Process     Troubleshooting     Quickly learning new skills and programming languages     Responsive design principles                 Technologuies and Frameworks                Nodejs        Deno        React        Bootstrap        Express        MongoDB        Behave        Jest        Git        Github        MySQL        NPM        Android        iOS        Flutter        React Native              Programming Languages         Java     Kotlin     Dart     Swift     C/C++     Python     JavaScript (ES6)     TypeScript     SQL     Scala        What You Can Expect From Me:  Writing is a new hobby I picked up recently and you can expect to get one or two article from me every week on technical guide for software enginenrs and becoming a better developer by new learnings Content creation on YouTube every week on technical guide for software enginenrs and becoming a better developer by new learningsWhere Else Can You Find Me: You can find me on the below channels where I’m generally active:  YouTube Twitter LinkedIn Facebook Instagram Telegram Github Dev. To Hashnode Medium StackoverflowFor collaboration, email me at admin@ankitkumar. dev   Support me, buy me a coffee Thank you for your support! Your donation helps me to maintain and improve AnkitDroidGit  Buy me a coffee "
    }, {
    "id": 2,
    "url": "http://localhost:4000/categories",
    "title": "Categories",
    "body": ""
    }, {
    "id": 3,
    "url": "http://localhost:4000/",
    "title": "Home",
    "body": "   Featured:                                 Top Flutter Advantages and Why You Should Try Flutter on Your Next Project              1 2 3 4 5           :        Flutter is Google’s UI toolkit for building beautiful, native applications from a single codebase for Mobile - Android and iOS Desktop - macOS, Chromebook, Windows, and Linux Web   :                                            Ankit Kumar          12 Dec 2020                                                     How to deep link from notification in react native app              1 2 3 4 5           :        Deep linking is when a link sends users directly into a specific point in the app experience, rather than an external website or app homepage.    :                                            Ankit Kumar          06 Dec 2020                                                     How to implement deep linking in React Native app with React Navigation v5              1 2 3 4 5           :        Deep linking is when a link sends users directly into a specific point in the app experience, rather than an external website or app homepage   :                                            Ankit Kumar          27 Nov 2020                                   All Stories:                               Why Flutter loves Dart              1 2 3 4 5           :        Dart is a simple and powerful language, which is, in its nature, complies to be efficient with everybody’s own javascript.    :                                            Ankit Kumar          19 Dec 2020                                                    Building your own Google Chrome Extension              1 2 3 4 5           :        Probably you are reading this article on the Google Chrome browser. Right?   :                                            Ankit Kumar          05 Nov 2020                                                    Apollo Server Express GraphQL API using Node. js with TypeScript              1 2 3 4 5           :        In this article, we are going to see how to build a Nodejs GraphQL API with TypeScript using Apollo Server Express.    :                                            Ankit Kumar          14 Jul 2020                                                    Github Secret : Creating A GitHub Profile              1 2 3 4 5           :        Creating A GitHub Profile   :                                            Ankit Kumar          29 Jun 2020                                                    Working with Github (or any software development version control using Git) for the beginners       :        Working with Github (or any software development version control using Git) for the beginners   :                                            Ankit Kumar          23 Jun 2020                                                    Getting Started with CameraX API              1 2 3 4 5           :        CameraX, launched at Google IO 19 , is a Jetpack support library, built to help us make camera app development easier. It provides a consistent and easy-to-use API surface that. . .    :                                            Ankit Kumar          13 May 2019                                "
    }, {
    "id": 4,
    "url": "http://localhost:4000/robots.txt",
    "title": "",
    "body": "      Sitemap: {{ “sitemap. xml”   absolute_url }}   "
    }, {
    "id": 5,
    "url": "http://localhost:4000/why-flutter-loves-dart/",
    "title": "Why Flutter loves Dart",
    "body": "2020/12/19 - Dart is a simple and powerful language, which is, in its nature, complies to be efficient with everybody’s own javascript. Welcome to Tech Talks tutorial. Table of Contents:  What Is Dart? Why Flutter uses Dart? How Dart enables developers to develop a Flutter app quickly and deploy it to multiple platforms? Dart SDK - Libraries, Tools, Dart VM, Dart Compiler to JSWhat is Dart?: Dart is a  client-optimized programming language for fast apps on any platform, After lots of experiments, the Google team found dart to be faster, smoother, and pretty efficient to be used for developing applications, including client-side and also server-side applications Object oriented &amp; Class defined C Styled syntaxWhat makes Dart so versatile?: What makes Dart so versatile is the fact that it compiles to its own format but also trans-compiles into javascript, which is readable by most of the devices today. So Dart can be used cross-platform mobile applications, web applications using Angular Dart, and command-line applications or server-side applications If you feel lazy to read more text, you can watch a video on the topic below Why Dart? / Why Flutter uses Dart? / Why Flutter loves Dart?: In today’s world, you need to build from many platforms to reach all your users, while maintaining quality to keep them happy. Flutter enables you to ship an application for Android, iOS,and the web from a single codebase. To do this, Flutter needs a programming language that works on all these platforms and gives you a fast development experience. That’s why Flutter chose Dart. How Dart enables developers to develop a Flutter app quickly and deploy it to multiple platforms?: If you’re developing for mobile, you might be used to slow compile and debug cycles. Dart changes this by enabling one of Flutter’s most loved features, hot reload, which injects updated Dart source code into your running app and rebuilds your UI in less than a second, so you can see your changes instantly. To have high-quality experiences of apps on both platforms, traditionally, you might have worked in separate teams to build performant apps for each platform. Dart enables you to build high fidelity Flutter apps for all platforms with one team. Dart’s production quality compilers compile to ARM and x64 machine code for mobile or optimized JavaScript for the web, enabling quick app startup times and smooth animations. Finally, Dart is easy to learn. You’ll pick up Dart quickly if you’re familiar with languages such as Java, Swift, and JavaScript. Together, Dart and Flutter help you create amazing experiences across Android, iOS, and the web. Try Dart in your browser today at dart. dev. Dart is not just a programming language: Dart holds much more than that, It includes  Libraries Tools A standalone Dart VM Compilers to JSOne does not need anything extra to support it, it includes all in one in its SDK. Dart VM allows code to run in CLI env as language tools included in the Dart SDK are written mostly in Dart itself. The standalone Dart VM is the critical part of Dart SDK. Libraries: Dart Ships with the complete standard libraries, allowing developers to write fully functional system apps such as custom web servers, custom mobile apps. Some of the default libraries provided by Dart are, but other third-party libraries are available too. dart:core  Provides a small but critical set of built-in complete functionality to dart Built-in types, collections, and other core functionality.  This library is automatically imported into every Dart program. dart:async  Support for asynchronous programming with callbacks Dart also provides other options for asynchronous programming by the support of classes such as Future and Stream. dart:math  Provides common mathematical and trigonometry functionality within darts such as sine and cosine Mathematical constants and functions, plus a random number generator.  Most of the functionality in the math library is implemented as a top-level function. dart:convert  Encoders and decoders for converting between different data representations, including JSON and UTF-8.  As well as support for additional customized convertersdart:html  DOM and other APIs for browser-based apps.  Allows manipulation of OBJECT and DOM Give access to HTML5 APIs. dart:io  I/O for programs that can use the Dart VM, including Flutter apps, servers, and command-line scripts.  Provides the support to deal with files, directories, processes, sockets and WebSockets and HTTP Clients and Serversdart:ui  Exposes the lowest-level services that Flutter use to bootstrap the application Such as classes for driving the input, graphic text, layouts, and rendering subsystems. Tools: Dart SDK  Dart SDK is a necessity for web developers, Script developers as well as Server-Side Developers.  For Mobile Developers dart comes as a package within Flutter SDK.  It means setting up Flutter SDK is good enough to start with Dart for Mobile Development. IDEs and Code Editor  Android Studio, VS Code, and IntelliJ idea - officially supported Atom, Vim, and Emacs are not supported officially by the Dart team but open-source plugins are availableDart Pad  Online dart compiler which allows us to play around with dart without installing any dependency, The link is in the description below, so please go ahead and check it out. CLI Tools - There are also certain command-line tools in DART 1. Pub Package Manager  A package manager that makes it easy for you to install, use, and share Dart libraries, command-line tools, and other assets. 2. Dartanalyzer  A static analyzer that evaluates and reports any errors or warnings in your code.  The Dart plugin for your IDE should make use of Dart’s analysis engine, but you can also run the analyzer from the command line. 3. Dartdoc  A documentation generator. 4. Dartfmt  An opinionated code formater that follows the recommendations of the Dart style guide IDEs that support Dart generally allow you to format the code within the IDE.  Or you can run the formater from the command line. 5. Build Runner  A building package that’s used behind-the-scenes by the web dev command. 6. Dartfix  A tool for migrating Dart source code and fixing common issues. Debugging Tools 1. Dart DevTools  A suite of debugging and performance tools. Dart VM: To run command-line apps, such as server-side scripts, programs, and servers, Dart VM borrows many Ideas from JavaScript VM used by Chrome called V8. But browsers actively rejected it, the reasons being size and concern similar to Javascript VM. It is important to know that DART VM works in the background during the process of application building. It runs in 2 basics forms JIT  Which is an acronym for Just In Time.  It is a mode that is used for dynamically loading dart source, parsing it, and compiling it to native machine code on the fly to execute this.  This mode is used when you develop your app It provides features such as debugging, hot reload, etcAOT  Which is an acronym for Ahead Of Time It is the mode used to support loading and executing pre-compiled machine code It does not support dynamic loading, parsing, or compilation It is mainly used in deployed applications. Dart VM is included in Dart SDK itself It also includes observatory options like enable assert which is an assert statement that checks a boolean condition and raises an exception if the condition is false. An important point to note about dart VM is that it can not be used for mobile applications or web applications Compiler to JavaScript: Dart code is compiled into javascript using DART2JS or DARTDEVC compiler which are already included in DART    dart2js - User can compiled dart file by converting into javascript file     dartdevc - let you run and debug your web app in any modern browser   And it is for in development by dart Note that the DartDevC compiler is only for the development And dart2js is used only for deploymentFurther Reading:  Top Flutter Advantages and Why You Should Try Flutter on Your Next Project How to implement deep linking in React Native app with React Navigation v5Also, to be notified about my new articles and stories: Subscribe to my YouTube Channel Follow me on Medium, Github, and Twitter. You can find me on LinkedIn as well. I am quite active on Dev Community as well and write small topics over there. Cheers!!! Happy coding!! "
    }, {
    "id": 6,
    "url": "http://localhost:4000/why-flutter/",
    "title": "Top Flutter Advantages and Why You Should Try Flutter on Your Next Project",
    "body": "2020/12/12 - Flutter is Google’s UI toolkit for building beautiful, native applications from a single codebase for  Mobile - Android and iOS Desktop - macOS, Chromebook, Windows, and Linux WebWelcome to Tech Talks tutorial. Table of Contents  What Is Flutter? More than 15 points of Why to use FlutterWhat is Flutter?: It belongs to the category of cross-platform development frameworks and tools that allows developers to build and compile native apps for  Android and iOS mobiles, Desktops including macOS, Chromebook, Windows, and Linux machines WebAll of this happens from a single code base. So we can say that Flutter is a Write once and run anywhere framework for developers. If you feel lazy to read more text, you can watch a video on the topic below Why Flutter? Let’s understand it with more than 15 points: 1. Integration of Flutter with existing Android and iOS apps It’s sometimes not practical to rewrite your entire application in Flutter all at once. For those situations, Flutter can be integrated into your existing application piecemeal, as a library or module. That module can then be imported into your Android or iOS (currently supported platforms) app to render a part of your app’s UI in Flutter. Or, just to run shared Dart logic. 2. Flutter can be developed on multiple IDEs  Including the Android Studio which is backed by JetBrains which build the worlds’ best IDE such as IntelliJ, WebStorm, PyCharm, and many more.  It works perfectly on the VS Code, and those who are not coming from Android Native development, can use the VS Code as the IDE. 3. Flutter has whole suites of web-based tooling of debugging and inspecting Flutter applications Here are some of the things you can do with DevTools:  Inspect the UI layout and state of a Flutter app.  Diagnose UI jank performance issues in a Flutter app.  CPU profiling for a Flutter or Dart app.  Network profiling for a Flutter app.  Source-level debugging of a Flutter or Dart app.  Debug memory issues in a Flutter or Dart command-line app.  View general log and diagnostics information about a running Flutter or Dart command-line app.  Analyze code and app size. 4. Dart is the programming language for Flutter Because it is optimized for Client development with HOT RELOAD, powered by the DART VM so that developers can iteratively make changes and instantly see changes or results in the app. 5. Dart compiles to native machine code for mobile and desktop, as well as to JavaScript for the web Whether you’re creating a mobile app, web app, command-line script, or server-side app, there’s a Dart solution for that. Flexible compiler technology lets you run Dart code in different ways, depending on your target platform and goals:  Dart Native: For programs targeting devices (mobile, desktop, server, and more), Dart Native includes both a Dart VM with JIT (just-in-time) compilation and an AOT (ahead-of-time) compiler for producing machine code.  Dart Web: For programs targeting the web, Dart Web includes both a development time compiler (dartdevc) and a production time compiler (dart2js). 6. Dart and Flutter has conditional UI features that help developers to render UI based on conditions A flutter package that enhances conditional rendering supports if-else and switch conditions  if-else example  123456789101112131415class MyWidget extends StatelessWidget {@overrideWidget build(BuildContext context) { return Column(  children: &lt;Widget&gt;[   Conditional. single(    context: context,    conditionBuilder: (BuildContext context) =&gt; someCondition == true,    widgetBuilder: (BuildContext context) =&gt; Text('The condition is true!'),    fallbackBuilder: (BuildContext context) =&gt; Text('The condition is false!'),   ),  ], );}}    switch example  123456789101112131415161718class MyWidget extends StatelessWidget {@overrideWidget build(BuildContext context) { return Column(  children: &lt;Widget&gt;[   ConditionalSwitch. single&lt;String&gt;(    context: context,    valueBuilder: (BuildContext context) =&gt; 'A',    caseBuilders: {     'A': (BuildContext context) =&gt; Text('The value is A!'),     'B': (BuildContext context) =&gt; Text('The value is B!'),    },    fallbackBuilder: (BuildContext context) =&gt; Text('None of the cases matched!'),   ),  ], );}}   7. Compiled code of Flutter is faster than others and it increases performance by 15% for many cases Flutter is fast. It’s powered by the same hardware-accelerated 2D graphics library that underpins Chrome and Android: Skia. Flutter is architectured to support glitch-free, jank-free graphics at the native speed of your device. Flutter code is powered by the world-class Dart platform, which enables compilation to 32-bit and 64-bit ARM machine code for iOS and Android, as well as JavaScript for the web and Intel x64 for desktop devices. 8. Flutter is an open-source product Open Source Community is the major source of feedback, documentation, and code contributions. Flutter on Github 9. Fastest growing skill among software engineers And Linked data says that Flutter is the fastest growing skill among software engineers. Read more about it here. 10. Shared UI and Business logic for all platforms To illustrate, here’s an example of how UI rendering looks like in most cross-platform frameworks: This kind of a rendering process makes building an app that looks native on every platform simple. But the devil’s in the details. Relying on platform-specific components for rendering provokes a need for a property mapping layer for the platform widget and a framework widget data synchronization. That’s what requires mapping every animation into a platform-specific widget call. So much more complicated than it needs to be, right? In contrast, Flutter doesn’t need any platform-specific UI components to render it’s UI. The only thing Flutter needs to show the application UI is a canvas to draw onto. And here’s how it looks like: 11. Reduced Code Development Time  Flutter offers stateful hot reload, allowing you to make changes to your code and see the results instantly without restarting your app or losing its state.  Wide variety of ready-to-use widgets In addition to numerous core layout widgets, Flutter provides a large set of Material and Cupertino widgets that perfectly mimic the behavior of each design language. 12. Native App Performance Application performance is crucial for good UX. While it’s hard to tell the exact figures, it’s safe to say that Flutter application performance in most cases will be indistinguishable from the native app and even better in complex UI animation scenarios. Why? Contrary to the approach of most cross-platform frameworks, Flutter doesn’t rely on any intermediate code representations or interpretation. Flutter application is built directly into the machine code, which eliminates any performance bugs of the interpretation process. Eventually, you get your release application fully compiled ahead of time with Flutter. 13. Custom, Animated UI of Any Complexity Available One of the biggest advantages of Flutter is the ability to customize anything you see on the screen, regardless of how complex it may be.  Flutter makes the process more flexible and versatile without adding to the workload. Shared element transitions, shape/color/shadow manipulations, clipping, transformations – Flutter allows you to perform all of these effortlessly 14. Own Rendering Engine Flutter uses Skia for rendering itself onto a platform-provided canvas. Because of the engine, UI built in Flutter can be launched on virtually any platform. Putting it differently, you no longer have to adjust UI to transfer it to a platform, which simplifies the development process hugely. 15. Simple Platform-Specific Logic Implementation Besides the UI, many real-life mobile applications rely on advanced OS-level features, such as fetching GPS coordinates, Bluetooth communication, gathering sensor data, permission handling, working with credentials, etc.  Many of these are available when developing a Flutter application through a ready-to-use plugin supported by Google. Flutter provides an easy to use way of establishing the communication between platform-native code and Dart through platform channels. This way, you can implement anything that a native app can do on a Flutter app, with just a little extra effort on the native side. 16 The Potential Ability to Go Beyond Mobile With Flutter, you can go far beyond Flutter app development on mobile. There’s also Flutter for Web and Flutter Desktop Embeddings now.  Further Reading:  How to implement deep linking in React Native app with React Navigation v5Also, to be notified about my new articles and stories: Subscribe to my YouTube Channel Follow me on Medium, Github, and Twitter. You can find me on LinkedIn as well. I am quite active on Dev Community as well and write small topics over there. Cheers!!! Happy coding!! "
    }, {
    "id": 7,
    "url": "http://localhost:4000/how-to-deep-link-from-notification-in-react-native/",
    "title": "How to deep link from notification in react native app",
    "body": "2020/12/06 - Deep linking is when a link sends users directly into a specific point in the app experience, rather than an external website or app homepage. How to implement deep linking in React Native app with React Navigation v5 What are we building?: In the last article, we learned about how to implement deep-links in the react native app with react-navigation v5. In this article, we will look at how to deep-link content in the app from the notification. We will use the below deep links and see how the app behaves when this deep link is received in the notification and the user tap on the notification.  demo://app/home/:id - This deep link will open the home screen of the app and will pass id as param/props to the home screen demo://app/profile/:id - This deep link will open the profile screen of the app and will pass id as param/props to the profile screen demo://app/notifications - This deep link will open the notifications screen of the app demo://app/settings - This deep link will open the settings screen of the appAfter the implementation of the deep link with notification, the app will behave as shown here. Let’s do some code now! Setting up the project: I am assuming that you already have a project in which deep links need to be integrated. If you don’t have any project, I have created a small app with four screens and explained it here. Setting up the notification in the project: Project is already created in previous article I have setup four kinds of local notification in the app  Schedule local notification without deep-link1234567 const scheduleLocalNotification = () =&gt; {  PushNotificationIOS. scheduleLocalNotification({   alertBody:  Scheduled Local Notification ,   fireDate: new Date(new Date(). valueOf() + 2000). toISOString(),  }); }; Local notification that deep-link to profile screen  1234567const sendProfilNotification = () =&gt; { PushNotificationIOS. presentLocalNotification({  alertTitle:  Deep link to profile ,  alertBody:  demo://app/profile/234 ,  applicationIconBadgeNumber: 1, });};    Local notification that deep-link to settings screen  12345678910const sendSettingsNotificationWithSound = () =&gt; { PushNotificationIOS. addNotificationRequest({  id:  notificationWithSound ,  title:  Notification Deep link ,  subtitle:  Received Deep link ,  body:  demo://app/settings ,  sound:  customSound. wav ,  badge: 1, });};    Local Notification Request that deep-link to the notifications screen  123456789101112const addNotificationRequest = () =&gt; { PushNotificationIOS. addNotificationRequest({  id:  test ,  title:  deep link ,  subtitle:  Open notifications ,  body:  demo://app/notifications ,  category:  test ,  threadId:  thread-id ,  fireDate: new Date(new Date(). valueOf() + 2000),  repeats: true, });};   Lets now write functions to handle registering to and unregistering from notification We will just console log device token on successful registration 123 const onRegistered = (deviceToken) =&gt; {  console. log( Registered For Remote Push , `Device Token: ${deviceToken}`); };and console log error message on registration error, if any 1234 const onRegistrationError = (error) =&gt; {  console. log(`Error (${error. code}): ${error. message}`); };Adding/Removing event listeners on useEffect Hook: Add below code to your app for adding and removing event listeners 1234567891011121314151617181920212223 useEffect(() =&gt; {  PushNotificationIOS. addEventListener( register , onRegistered);  PushNotificationIOS. addEventListener(    registrationError ,   onRegistrationError  );    PushNotificationIOS. requestPermissions(). then(   (data) =&gt; {    console. log( PushNotificationIOS. requestPermissions , data);   },   (data) =&gt; {    console. log( PushNotificationIOS. requestPermissions failed , data);   }  );  return () =&gt; {   PushNotificationIOS. removeEventListener( register );   PushNotificationIOS. removeEventListener( registrationError );   PushNotificationIOS. removeEventListener( notification );   PushNotificationIOS. removeEventListener( localNotification );  }; }, []);Handling onClick of notifcation: Lets now create a function to handle onclick event of notification 1234 const onLocalNotification = (notification) =&gt; {  const isClicked = notification. getData(). userInteraction === 1;  // Handle deeplink here from notification - done below };We need to add onLocalNotification() to event listeners, so the updated event lister will look like below. 123456789101112131415161718192021222324252627useEffect(() =&gt; {  PushNotificationIOS. addEventListener( register , onRegistered);  PushNotificationIOS. addEventListener(    registrationError ,   onRegistrationError  );  PushNotificationIOS. addEventListener(    localNotification ,   onLocalNotification  ); // Handling click on notification  PushNotificationIOS. requestPermissions(). then(   (data) =&gt; {    console. log( PushNotificationIOS. requestPermissions , data);   },   (data) =&gt; {    console. log( PushNotificationIOS. requestPermissions failed , data);   }  );  return () =&gt; {   PushNotificationIOS. removeEventListener( register );   PushNotificationIOS. removeEventListener( registrationError );   PushNotificationIOS. removeEventListener( notification );   PushNotificationIOS. removeEventListener( localNotification );  }; }, []);Lets do magic now: Import Linking from react-native on top of the file. Modify onLocalNotification() method as below 1234const onLocalNotification = (notification) =&gt; {  const isClicked = notification. getData(). userInteraction === 1;  Linking. openURL(notification. getMessage()); };We are done with the coding part It was easy, wasn’t it? Testing deep-link from the notification: Video of testing Full source code can be found on Github Repo This content is also available as video on YouTube Further Reading:  How to implement deep linking in React Native app with React Navigation v5Also, to be notified about my new articles and stories: Subscribe to my YouTube Channel Follow me on Medium, Github, and Twitter. You can find me on LinkedIn as well. I am quite active on Dev Community as well and write small topics over there. Cheers!!! Happy coding!! "
    }, {
    "id": 8,
    "url": "http://localhost:4000/react-native-deeplink-with-react-navigation/",
    "title": "How to implement deep linking in React Native app with React Navigation v5",
    "body": "2020/11/27 - Deep linking is when a link sends users directly into a specific point in the app experience, rather than an external website or app homepage Whats is Deeplink:  A deep link is a link that takes you to content.  Deep linking is when a link sends users directly into a specific point in the app experience, rather than an external website or app homepage.  Most web links are deep links. Types of Deep Linking:  Custom URI Schemes iOS Universal Links Android App LinksURI Schemes:  Custom URI schemes were the original form of deep linking for mobile apps.  They are like creating a “private internet” for your app, with links that look like demo://path/to/content The advantage of custom URI schemes is they are easy to set up.  The disadvantage is a user’s device only knows about this private internet if the corresponding app is already installed, and there is no graceful fallback option by default. Universal Links:  Apple introduced Universal Links in iOS 9 as a solution to the lack of graceful fallback functionality in custom URI scheme deep links.  Universal Links are standard web links (https://ankitkumar. dev) that point to both a web page and a piece of content inside an app.  When a Universal Link is opened, iOS checks to see if any installed app on the device is registered for that domain.      If so, the app is launched immediately without ever loading the web page.    If not, the web URL (which can be a simple redirect to the App Store) is loaded in Safari.    Android App Links:  Google built App Links as the Android equivalent to iOS Universal Links.  They operate in a very similar way:     a standard web link that points to both a web page and a piece of content inside an app.     This results in a smoother user experience.  Since custom URI schemes are still fully supported by every version of Android, App Links have seen very low adoption. What are we building?: I am declaring deep link URLs for our application, which will open our app from anywhere in the os on Android and iOS devices.  demo://app/home/:id - This deep link will open the home screen of the app and will pass id as param/props to the home screen demo://app/profile/:id - This deep link will open the profile screen of the app and will pass id as param/props to the profile screen demo://app/notifications - This deep link will open the notifications screen of the app demo://app/settings - This deep link will open the notifications screen of the appAfter the implementation of the deep-link, the app will behave as shown here. Let’s do some code now! Setting up the project: I am assuming that you already have a project in which deep links need to be integrated. If you don’t have any project, I have created a small app with four screens and explained here. Setting up custom uri scheme for iOS in Xcode:  Open your react-native(deeplinkreactnavigation) project and go to the ios folder.  Open the file with extension . xcworkspace by double-clicking on it. In this project deeplinkreactnavigation. xcworkspace is the file.  After opening in Xcode, follow the steps from the screenshot below and add demo to URL Schemes and target name(deeplinkreactnavigation) to the Identifier. Setting up custom URI scheme for Android in Android Studio:  Open your react-native(deeplinkreactnavigation) project and go to the android folder.  Open file build. gradle with Android Studio.  After opening in Android Studio, open Androidmanifest. xml and add intent-filter as shown below. Handling deep link in react native:  Create a new file linking. js Add prefixes as an array of demo://app and all deep link URLs as described above to the file as shown belowUsing linking. js in App. js:  import linking in App. js Add it to NavigationContainer as shown belowWe are done with the coding part It was easy, wasn’t it? Testing deeplink: Its always easy and better to test deep link on physical devices, so  Install the app on devices(Android or iOS or both) Have the deep link URL in any other app Tap on deep link URL as a normal URL Its should take you our app’s respective screenIf you want to test deep link on virtual devices, then  Install the app on virtual devices(Android or iOS or both) Type command npx uri-scheme open demo://app/notifications --android for android to deeplink to notifications screen Type command npx uri-scheme open demo://app/notifications --ios for ios to deeplink to notifications screen And see the magicTesting Video Further Reading:  How to deep link from notification in react native appAlso, to be notified about my new articles and stories: Subscribe to my YouTube Channel Follow me on Medium, Github, and Twitter. You can find me on LinkedIn as well. I am quite active on Dev Community as well and write small topics over there. Cheers!! "
    }, {
    "id": 9,
    "url": "http://localhost:4000/building-own-cheome-extension/",
    "title": "Building your own Google Chrome Extension",
    "body": "2020/11/05 - Probably you are reading this article on the Google Chrome browser. Right? If yes, you would have used extensions on your browser to customize your experience. Today I am here to describe how you can write and build your own extension for the Google Chrome browser. Lets Start !!!!: If you feel lazy in reading articles, you should watch a video tutorial below Let’s start reading finally. By this time you have got to know that we are going an extension for Google Chrome. So the question comes what this extension will do for us? The answer is We are will build an extension that will open a new tab on the browser with a predefined URL, in this example it is my YouTube Channel URL. What is the Google Chrome extension?:  Chrome Extension helps to add some functionality to Chrome through some of the JavaScript APIs Chrome exposes.  It is basically a webpage hosted within Chrome.  It can access some additional APIs. Let’s do some code now! Setting up the project: Create a directory called ChromeExtension and Open this in your favorite code editor Create the manifest: Extensions start with their manifest. Create a file called manifest. json and include the following code.  name is the name of the extension.  version is the current version of the extension. Introduce a User Interface and Logo: Create a file called test. html and add the following code. Add logo to project, I have added a file called logo. png. These files need to be designated as a popup in the manifest under browser_action The updated manifest. json will look like this Override Pages: As I mentioned above, we are building an extension that will open a new tab with a predefined URL. We have to add a page for it. Create a file called newtab. html and add the following code to it. These files need to be designated as a popup in the manifest under chrome_url_overrides. The updated manifest file shown is below We are done with the coding part. It was easy, wasn’t it? Adding an extension to Chrome:  Open the Extension Management page by navigating to chrome://extensionsor  The Extension Management page can also be opened by clicking on the Chrome menu, hovering over More Tools then select Extensions Enable Developer Mode by clicking the toggle switch next to Developer mode Click the LOAD UNPACKED button and select the extension directory The extension has been successfully installed !!! You should pin it to make visible on the extension bar of Google Chrome.  Testing extension: Also, to be notified about my new articles and stories, follow me on Medium, Github, and Twitter. You can find me on LinkedIn as well. I am quite active on Dev Community as well and write small topics over there. Cheers!! "
    }, {
    "id": 10,
    "url": "http://localhost:4000/fundamentals-of-graphql/",
    "title": "Apollo Server Express GraphQL API using Node.js with TypeScript",
    "body": "2020/07/14 - In this article, we are going to see how to build a Nodejs GraphQL API with TypeScript using Apollo Server Express. I conducted a workshop for beginners who want to write GraphQL APIs using Typescript and Nodejs. If it feels boring reading lots of words one by one and you can understand Hindi a bit. You can watch video tutorials for this. Video tutorials are available on my YouTube Channel as Playlsit. Let’s understand a few terminologies before actually diving into the code. Node. js:  Node. js is a platform built on Chrome’s JavaScript runtime for easily building fast and scalable network applications.  Node. js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.  More document about node. js is here. Apollo Server:  Apollo Server is an open-source, spec-compliant GraphQL server that’s compatible with any GraphQL client, including Apollo Client.  It’s the best way to build a production-ready, self-documenting GraphQL API that can use data from any source.  Read more about Apollo Server here. You can use Apollo Server as: A stand-alone GraphQL server, including in a serverless environment An add-on to your application’s existing Node. js middleware (such as Express or Fastify) A gateway for a federated data graph. Apollo Server provides: Straightforward setup, so your client developers can start fetching data quickly Incremental adoption, allowing you to add features as they’re needed Universal compatibility with any data source, any build tool, and any GraphQL client Production readiness, enabling you to ship features faster. Express:  Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls.  Read more about express hereTypeScript:  TypeScript is JavaScript that scales.  Because TypeScript is a superset of JavaScript, it doesn’t have a default template — there would be too many. Instead, other projects have their own TypeScript bootstrap templates with their own context. Why use TypeScript over JavaScript? If an experienced developer is working on relatively small coding projects, then JavaScript is ideal. However, if you have the knowledge and expertise development team, then Typescript is the most preferred option. Typescript has the following advantages over Javascript.  The powerful type system, including generics &amp; JS features TypeScript uses concepts like types and interfaces to describe data being used.  The Ecosystem is quite powerful and intuitive. Thus, it allows you to statically type various types of idiomatic JavaScript features like union types, intersection, discriminated union.  With Typescript, many npm packages either come with static type definitions or have an external one that is easy to install.  Typescript has a feature of prototyping.  Early spotted bugs Predictability Readability Power of OOPLet’s write code for what we are here…. : Creating a directory and working on 12mkdir apollo-server-demo-projectcd apollo-server-demo-projectSetting up the npm project 1npm init — yesThis command will create a package. json file in the project. Install and initializing TypeScript for our project Add TypeScript to our project’s npm devDependencies 1npm install — save-dev typescriptGenerate a tsconfig. json file using npx. 1npx tsc --init --rootDir src --outDir dist --lib dom,es6 --module commonjs –removeCommentsRunning above command will create tsconfig. json file in the project and it will look like this.  We will also need nodemon to compile our code on change, and ts-node to exec TypeScript files. Let’s install these 2 dependencies as well now 1npm i nodemon ts-node --save-devWriting actual code now: Create a /src directory with a server. ts file and print hello world from server. ts file 1console. log(“Hello World”);Run below command to see the result on your terminal of project. 1nodemon 'src/server. ts' --exec 'ts-node' src/server. tsYou will see Hello World printed on your terminal as below.  Lets now create an actual GraphQL API: Setting up Apollo-Server-Express Installing dependencies for apollo-server-express, cors, express and graphql 1npm install apollo-server-express cors express graphqlInstalling dependencies for @types/express, @types/node, graphql-tools and graphql-import-node 1npm install @types/express @types/node graphql-tools graphql-import-node --save-devCreating a simple schema and resolver In the /src folder, create a /schema folder and create a file schema. graphql Then let’s quickly create a resolvers. ts file in the /src folder Create a schema. ts file in the /src folder that will be in charge of making an Executable GraphQL Schema: Finally creating apollo-server Run your server again open http://localhost:8000/graphql on browsers of any other graphql client software.  Let’s test your helloWolrd query from the client: Add scripts in your package. json file as below for running commands in an easier way from next time. 123456 scripts : { start :  node 'dist/server. js' , build :  tsc -p . &amp;&amp; ncp src/schema dist/schema , start:dev :  npm run build:dev , build:dev :  nodemon 'src/server. ts' --exec 'ts-node' src/server. ts -e ts,graphql }, Running npm run build:dev in your terminal will compile your code.  You can run the compiled code with npm start:dev Running npm run build in your terminal will compile your code and put it in the /dist folder.  You can run the compiled code with npm startLets now create a Mutation GraphQL API: Add mutation object in src/schem/schema. graphql file Add some logic for resolving mutation in src/resolvers. ts file as shown below Run the command and test mutation from client Happy learning and happy coding !!! The code for this workshop is available as open source on GitHub repo. I have tried to share some of the lessons that I have learned from various sources. I will continue to keep learning more and sharing more. I hope it helps someone and makes their life a bit easier. Also, to be notified about my new articles and stories, follow me on Medium, Github, and Twitter. You can find me on LinkedIn as well. I am quite active on Dev Community as well and write small topics over there. Cheers!!!! "
    }, {
    "id": 11,
    "url": "http://localhost:4000/github-secret-creating-github-profile/",
    "title": "Github Secret : Creating A GitHub Profile",
    "body": "2020/06/29 - Creating A GitHub Profile: Github says AnkitDroidGit/AnkitDroidGit is now a special repository: its README. md will appear on your profile! GitHub recently released a feature that allows users to create a profile README to display prominently on their GitHub profile. This write-up explains how to access this new feature and create your own special repository. Let’s Start !!: The profile README is created by creating a new repository with the same name as your username. Let’s understand with my example:My GitHub username is AnkitDroidGit so I created a new repository with the name AnkitDroidGit. Note: new repository name must match (including letter case) your GitHub username. Let’s follow the steps:  Create a new repository with the same name (including casing) as your GitHub username: https://github. com/new Let it be public.  Initialize this repository with a README.  Modify README. md file inside the repo with your content (text, GIFs, images, emojis, etc. ) Commit your README! Push changes to GitHub (if you made changes locally). And finally, you will get a profile read me like mine.  Also, to be notified about my new articles and stories, follow me on Medium, Github. You can find me on LinkedIn as well. Cheers! "
    }, {
    "id": 12,
    "url": "http://localhost:4000/git-basics-for-beginners/",
    "title": "Working with Github (or any software development version control using Git) for the beginners",
    "body": "2020/06/23 - Working with Github (or any software development version control using Git) for the beginners Many new developers face this problem when they start working on a project which is shared among many team member and many of them need to work together on the project. It becomes hard for newbies to create PR and adding their work to the upstream project repo. I am trying to make this easier for all the newbies who are going to work on the project collaboration in the team. By following these steps, it becomes easier to handle changes, stashing, committing, creating, and merging PR after approval. Let’s go through the steps with commands and sample project on Github. For getting hands-on experience of the below steps, feel free to fork this Github repo and follow along    Clone project from upstream to the local repo   1   git clone git@github. com:AnkitDroidGit/git-basics-for-newbies. git    Open project with your favorite IDE/Code Editor   Pull the latest changes from upstream if you haven’t pulled changes from quite some time (think of changes merged by other members of your team)   1   git pull    Make your changes on the master (default) branch. I am adding a new file called contributors. md and appending it with my name Ankit Kumar.    Add file(s) to git for tracking by git add   1   git add name    You can add all files by running below command   1   git add .       Check differences by running the following command.   1   git diff      Now suppose someone from your teams has already added and merged his changes to the master branch. If you are going to commit and push your changes without synching repo with upstream, you might get conflicts that become hard to resolve later in case of many conflicts. Its a great idea to sync your local repo with upstream. We will do it here by the below commands.          First, stash your changes. Stashing saves your working directory and index state WIP on master: with the latest commit     1  git stash              Run git pull for latest changes from upstream branch, if any.     1  git pull              Apply your stashed change to an active changelist or default changelist.     1  git stash apply             Check your difference again by running git diff   1  git diff    Resolve conflicts if any. Resolving conflicts now is easier compared to the time of many many conflicts at the time of creating PR without synching.    Now, add commit message   1  git commit - m  added my name in contributors. md       Checkout to a new branch   1  git checkout -b addedName      Push your changes to the newly checked out branch. It will create a new branch on upstream with the same name your have checked out with.   1  git push --set-upstream origin addedName      Visit Github (or any software development version control using Git) repo on the browser. Click on compare and pull request,Write your PR name with appropriate comments. Add reviewers to request team members to review your PR.     Finally click on create pull requestYou have done your work already. Wait for the reviewer to review     Once PR is approved by the reviewer(s). Visit your branch and merge your branch.   On your local repo, pull master again before making any other changes, follow the steps again. Also, to be notified about my new articles and stories, follow me on Medium, Github. You can find me on LinkedIn as well. Cheers! "
    }, {
    "id": 13,
    "url": "http://localhost:4000/camera-x-android/",
    "title": "Getting Started with CameraX API",
    "body": "2019/05/13 - CameraX, launched at Google IO 19 , is a Jetpack support library, built to help us make camera app development easier. It provides a consistent and easy-to-use API surface that works across most Android devices, with backward-compatibility to Android 5. 0 (API level 21). Why CameraX is beneficial?: As per the documentation, CameraX has following primary benefits :  Easy to use Consistence across the devices It provide new camera experience to the userRequirements: Requirements to use CameraX are :  Android Studio 3. 3 or later A device running on Android L or laterLet’s get hands on app code: Create Android Project with minimum APL level 21. 123456  defaultConfig {    applicationId  com. ankkumar. cameraxsampleapp     minSdkVersion 21    targetSdkVersion 28    . . . . . .   }Add dependencies in app 12  implementation  androidx. camera:camera-core:1. 0. 0-alpha01   implementation  androidx. camera:camera-camera2:1. 0. 0-alpha01 Request Camera Permissions In the manifest file 1  &lt;uses-permission android:name= android. permission. CAMERA  /&gt;Handoling runtime permission in kotlin 12345678  import android. Manifest  import android. util. Size  import android. graphics. Matrix  import java. util. concurrent. TimeUnit  private const val REQUEST_CODE_PERMISSIONS = 881  private val REQUIRED_PERMISSIONS = arrayOf(Manifest. permission. CAMERA)actual code of permission handling look like below Time to create UI:  Create and Implement view finder   Implementation of view finder          Declare lateinit     1  private lateinit var viewFinder: TextureView          define it inside onCreate(. . ) method    1  viewFinder = findViewById(R. id. finder_view)              and implement it as below           Implementing Image Capture:    Write below code to capture image      Place below code between CameraX. bindToLifecycle(this, preview) and CameraX. bindToLifecycle(this, preview, imageCapture)   Analysing captured image:    create a class called ImageAnalyzer as below   12345 class ImageAnalyzer : ImageAnalysis. Analyzer {   override fun analyze(image: ImageProxy?, rotationDegrees: Int) {     TODO( not implemented ) //To change body of created functions use File | Settings | File Templates.    } }    And implement above class for analyzing image  Now add image analysis code inside startCamera() method as below  12345678910111213  // Setup image analysis pipeline that computes average pixel luminance val analyzerConfig = ImageAnalysisConfig. Builder(). apply {   // Use a worker thread for image analysis to prevent glitches   val analyzerThread = HandlerThread(       LuminosityAnalysis    ). apply { start() }   setCallbackHandler(Handler(analyzerThread. looper))   // In our analysis, we care more about the latest image than   // analyzing *every* image   setImageReaderMode(     ImageAnalysis. ImageReaderMode. ACQUIRE_LATEST_IMAGE   ) }. build()    After adding this snippet modify CameraX. bindToLifecycle() method with this argument Now our complete startCamera() will look like this Testing app: And it works perfect !!!Congratulations !!! "
    }];

var idx = lunr(function () {
    this.ref('id')
    this.field('title')
    this.field('body')

    documents.forEach(function (doc) {
        this.add(doc)
    }, this)
});
function lunr_search(term) {
    document.getElementById('lunrsearchresults').innerHTML = '<ul></ul>';
    if(term) {
        document.getElementById('lunrsearchresults').innerHTML = "<p>Search results for '" + term + "'</p>" + document.getElementById('lunrsearchresults').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>No results found...</li>";
        }
    }
    return false;
}

function lunr_search(term) {
    $('#lunrsearchresults').show( 400 );
    $( "body" ).addClass( "modal-open" );
    
    document.getElementById('lunrsearchresults').innerHTML = '<div id="resultsmodal" class="modal fade show d-block"  tabindex="-1" role="dialog" aria-labelledby="resultsmodal"> <div class="modal-dialog shadow-lg" role="document"> <div class="modal-content"> <div class="modal-header" id="modtit"> <button type="button" class="close" id="btnx" data-dismiss="modal" aria-label="Close"> &times; </button> </div> <div class="modal-body"> <ul class="mb-0"> </ul>    </div> <div class="modal-footer"><button id="btnx" type="button" class="btn btn-danger btn-sm" data-dismiss="modal">Close</button></div></div> </div></div>';
    if(term) {
        document.getElementById('modtit').innerHTML = "<h5 class='modal-title'>Search results for '" + term + "'</h5>" + document.getElementById('modtit').innerHTML;
        //put results on the screen.
        var results = idx.search(term);
        if(results.length>0){
            //console.log(idx.search(term));
            //if results
            for (var i = 0; i < results.length; i++) {
                // more statements
                var ref = results[i]['ref'];
                var url = documents[ref]['url'];
                var title = documents[ref]['title'];
                var body = documents[ref]['body'].substring(0,160)+'...';
                document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML + "<li class='lunrsearchresult'><a href='" + url + "'><span class='title'>" + title + "</span><br /><small><span class='body'>"+ body +"</span><br /><span class='url'>"+ url +"</span></small></a></li>";
            }
        } else {
            document.querySelectorAll('#lunrsearchresults ul')[0].innerHTML = "<li class='lunrsearchresult'>Sorry, no results found. Close & try a different search!</li>";
        }
    }
    return false;
}
    
$(function() {
    $("#lunrsearchresults").on('click', '#btnx', function () {
        $('#lunrsearchresults').hide( 5 );
        $( "body" ).removeClass( "modal-open" );
    });
});